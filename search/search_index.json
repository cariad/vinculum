{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Vinculum Vinculum is a Python package for handling large numbers with high precision. Examples Numbers are recorded as rational fractions rather than floating-point decimals, so 1.2 - 1.0 really does equal 0.2 . Using native float : a = 1.2 b = 1.0 c = a - b print ( c ) # 0.19999999999999996 Using Vinculum Rational : from vinculum import Rational a = Rational . from_float ( 1.2 ) b = Rational . from_float ( 1.0 ) c = a - b print ( c ) # 1/5 print ( c . decimal ()) # 0.2 A Rational can be rendered to any arbitrary number of decimal places, but repeating digits will be noted and rendered with overhead dots: from vinculum import Rational print ( Rational ( 1146408 , 364913 ) . decimal ( max_dp = 999 )) # 3.141592653591403978482542414219279663919893234825835199074847977463121346731 # 96076873117702027606580198567877822933137487565529317947017508282796173334466 # 02340831924321687635134949974377454352133248198885761811719505745205021470871 # 13914823533280535360483183662955279751612028072444664892727855680669090988811 # 03167056257244877546154836906331098097354711945038954490522398489502977422015 # 65852682694231227717291518800371595421374409790826854620142335296358310062946 # 51053812826618947529959195753508370488308172084853101972250920082320991578814 # 67637491676098138460400150172780909422245850380775691740223012060408919386264 # 67130521521568154601233718721996749910252580752124478985401999928750140444434 # 70087390693124114514966581075489226199121434424095606350006713929073505191648 # 42030840227670705072167886592146621249448498683247787828879760381241556206547 # 86209315645098968795301893876074571199162540112300740176425613776434382989918 # 14487288751017365783077062203867771222181725507175682971009528298525950020963 print ( Rational ( 1 , 3 ) . decimal ()) # 0.\u03073 Note that the latter output is 0.\u03073 with a dot and not 0.3 . Installation Vinculum requires Python 3.11 or later: pip install vinculum Support Please raise bugs, feature requests and ask questions at github.com/cariad/vinculum/issues . The Project Vinculum is \u00a9 2022-2023 Cariad Eccleston and released under the MIT License at github.com/cariad/vinculum . The Author Hello! \ud83d\udc4b I'm Cariad Eccleston and I'm a freelance backend and infrastructure engineer in the United Kingdom. You can find me at cariad.earth , github/cariad , linkedin/cariad and on the Fediverse at @cariad@hachyderm.io .","title":"Vinculum"},{"location":"#vinculum","text":"Vinculum is a Python package for handling large numbers with high precision.","title":"Vinculum"},{"location":"#examples","text":"Numbers are recorded as rational fractions rather than floating-point decimals, so 1.2 - 1.0 really does equal 0.2 . Using native float : a = 1.2 b = 1.0 c = a - b print ( c ) # 0.19999999999999996 Using Vinculum Rational : from vinculum import Rational a = Rational . from_float ( 1.2 ) b = Rational . from_float ( 1.0 ) c = a - b print ( c ) # 1/5 print ( c . decimal ()) # 0.2 A Rational can be rendered to any arbitrary number of decimal places, but repeating digits will be noted and rendered with overhead dots: from vinculum import Rational print ( Rational ( 1146408 , 364913 ) . decimal ( max_dp = 999 )) # 3.141592653591403978482542414219279663919893234825835199074847977463121346731 # 96076873117702027606580198567877822933137487565529317947017508282796173334466 # 02340831924321687635134949974377454352133248198885761811719505745205021470871 # 13914823533280535360483183662955279751612028072444664892727855680669090988811 # 03167056257244877546154836906331098097354711945038954490522398489502977422015 # 65852682694231227717291518800371595421374409790826854620142335296358310062946 # 51053812826618947529959195753508370488308172084853101972250920082320991578814 # 67637491676098138460400150172780909422245850380775691740223012060408919386264 # 67130521521568154601233718721996749910252580752124478985401999928750140444434 # 70087390693124114514966581075489226199121434424095606350006713929073505191648 # 42030840227670705072167886592146621249448498683247787828879760381241556206547 # 86209315645098968795301893876074571199162540112300740176425613776434382989918 # 14487288751017365783077062203867771222181725507175682971009528298525950020963 print ( Rational ( 1 , 3 ) . decimal ()) # 0.\u03073 Note that the latter output is 0.\u03073 with a dot and not 0.3 .","title":"Examples"},{"location":"#installation","text":"Vinculum requires Python 3.11 or later: pip install vinculum","title":"Installation"},{"location":"#support","text":"Please raise bugs, feature requests and ask questions at github.com/cariad/vinculum/issues .","title":"Support"},{"location":"#the-project","text":"Vinculum is \u00a9 2022-2023 Cariad Eccleston and released under the MIT License at github.com/cariad/vinculum .","title":"The Project"},{"location":"#the-author","text":"Hello! \ud83d\udc4b I'm Cariad Eccleston and I'm a freelance backend and infrastructure engineer in the United Kingdom. You can find me at cariad.earth , github/cariad , linkedin/cariad and on the Fediverse at @cariad@hachyderm.io .","title":"The Author"},{"location":"math/","text":"Mathematic functions greatest_common_divisor The greatest_common_divisor function returns the greatest common divisor (GCD) -- also known as the greatest common factor (GCF), highest common divisor (HCD), and highest common factor (HCF) -- of two integers. greatest_common_divisor ( 25767 , 34356 ) # 8589 int_to_buffer The int_to_buffer function writes an integer to a string buffer, avoiding the CVE-2020-10735 vulnerabilty and breaking change for direct conversion of integers to strings. string_to_int The string_to_int converts a string to an integer, avoiding the CVE-2020-10735 vulnerabilty and breaking change for direct conversion of integers to strings.","title":"Mathematic functions"},{"location":"math/#mathematic-functions","text":"","title":"Mathematic functions"},{"location":"math/#greatest_common_divisor","text":"The greatest_common_divisor function returns the greatest common divisor (GCD) -- also known as the greatest common factor (GCF), highest common divisor (HCD), and highest common factor (HCF) -- of two integers. greatest_common_divisor ( 25767 , 34356 ) # 8589","title":"greatest_common_divisor"},{"location":"math/#int_to_buffer","text":"The int_to_buffer function writes an integer to a string buffer, avoiding the CVE-2020-10735 vulnerabilty and breaking change for direct conversion of integers to strings.","title":"int_to_buffer"},{"location":"math/#string_to_int","text":"The string_to_int converts a string to an integer, avoiding the CVE-2020-10735 vulnerabilty and breaking change for direct conversion of integers to strings.","title":"string_to_int"},{"location":"rational/","text":"Rational class A Rational class instance represents a rational number. Initialisation A new Rational requires a numerator and denominator . For example, to create the rational number 2/3 : two_thirds = Rational ( 2 , 3 ) # 2/3 From a floating-point number A Rational can also be created from a float by calling from_float . two_and_a_half = Rational . from_float ( 2.5 ) # 5/2 From a string Finally, a Rational can also be created by passing a string to from_string . The string is expected to be either: a fraction in the form x/y or -x/y , or: a decimal in the form x , -x , x.y or -x.y , where . is your local culture's decimal marker. two_thirds = Rational . from_string ( \"2/3\" ) # 2/3 two_and_a_half = Rational . from_string ( \"2.5\" ) # 5/2 Mathematic operations The following operations can be performed between a Rational and: int float str other Rational instances Addition Rational ( 1 , 3 ) + Rational ( 1 , 4 ) # 7/12 Rational ( 1 , 3 ) + 0.25 # 7/12 Rational ( 1 , 3 ) + \"0.25\" # 7/12 Rational ( 1 , 3 ) + \"1/4\" # 7/12 Subtraction Rational ( 2 , 3 ) - Rational ( 1 , 4 ) # 5/12 Rational ( 2 , 3 ) - 0.25 # 5/12 Rational ( 2 , 3 ) - \"0.25\" # 5/12 Rational ( 2 , 3 ) - \"1/4\" # 5/12 Multiplication Rational ( 2 , 4 ) * Rational ( 3 , 6 ) # 1/4 Rational ( 2 , 4 ) * 0.5 # 1/4 Rational ( 2 , 4 ) * \"0.5\" # 1/4 Rational ( 2 , 4 ) * \"4/8\" # 1/4 True division Rational ( 20 , 4 ) / Rational ( 17 , 8 ) # 40/17 Rational ( 20 , 4 ) / 2.125 # 40/17 Rational ( 20 , 4 ) / \"2.125\" # 40/17 Rational ( 20 , 4 ) / \"17/8\" # 40/17 Floor division Floor division returns a Rational that describes the integral result of the division. Rational ( 20 , 4 ) // Rational ( 17 , 8 ) # 2/1 Rational ( 20 , 4 ) // 2.125 # 2/1 Rational ( 20 , 4 ) // \"2.125\" # 2/1 Rational ( 20 , 4 ) // \"17/8\" # 2/1 Comparison Equality Rational ( 2 , 4 ) == Rational ( 3 , 6 ) # True Rational ( 2 , 4 ) == 0.5 # True Rational ( 2 , 4 ) == \"0.5\" # True Rational ( 2 , 4 ) == \"4/8\" # True Greater than Rational ( 2 , 3 ) > Rational ( 1 , 4 ) # True Rational ( 2 , 3 ) > 0.25 # True Rational ( 2 , 3 ) > \"0.25\" # True Rational ( 2 , 3 ) > \"1/4\" # True Greater than or equal to Rational ( 2 , 3 ) >= Rational ( 1 , 4 ) # True Rational ( 2 , 3 ) >= 0.25 # True Rational ( 2 , 3 ) >= \"0.25\" # True Rational ( 2 , 3 ) >= \"1/4\" # True Less than Rational ( 2 , 3 ) < Rational ( 1 , 4 ) # False Rational ( 2 , 3 ) < 0.25 # False Rational ( 2 , 3 ) < \"0.25\" # False Rational ( 2 , 3 ) < \"1/4\" # False Less than or equal to Rational ( 2 , 3 ) <= Rational ( 1 , 4 ) # False Rational ( 2 , 3 ) <= 0.25 # False Rational ( 2 , 3 ) <= \"0.25\" # False Rational ( 2 , 3 ) <= \"1/4\" # False Integral and fractional parts The integral property returns the integral part of the number, and fractional returns the fractional part. For example, given 3/2 , the integral part is 1 (i.e. 2/2 ) and the fractional part is 1/2 . Decimal string The decimal function returns the Rational as a decimal string. Rational ( 33 , 8 ) . decimal () # \"4.125\" By default, decimal will return no more than 100 decimal places. To adjust this, set the max_dp argument. This is limited only by your available memory and patience. Rational ( 355 , 113 ) . decimal ( max_dp = 6 ) # \"3.141592\" By default, decimal will monitor for recurring digits and represent them with an overhead dot. Rational ( 1 , 3 ) . decimal () # \"0.\u03073\" If you prefer, you can disable recursion tracking by setting recursion=False . Rational ( 1 , 3 ) . decimal ( max_dp = 6 , recursion = False ) # \"0.333333\" Also, if you prefer, you can change the overhead dot to any string by setting recurring_prefix . For example, \\u0305 is an overhead line. Rational ( 1 , 3 ) . decimal ( recurring_prefix = \" \\u0305 \" ) # \"0.\u03053\" Tip To get the true floating-point value of a Rational , convert it to a float via Python's built-in float() function. float ( Rational ( 4 , 3 )) # 1.3333333333333333 Reciprocals The reciprocal property returns the reciprocal of the Rational . Rational ( 1 , 3 ) . reciprocal # 3/1 Reduction The reduced property returns the Rational in its most-simplified form. Rational ( 25767 , 34356 ) . reduced # 3/4 Converting to floating-point and integer numbers To get the true floating-point value of a Rational , convert it to a float via Python's built-in float() function. float ( Rational ( 4 , 3 )) # 1.3333333333333333 Likewise, use the built-in int() function to get the integral value as an int . int ( Rational ( 4 , 3 )) # 1","title":"Rational class"},{"location":"rational/#rational-class","text":"A Rational class instance represents a rational number.","title":"Rational class"},{"location":"rational/#initialisation","text":"A new Rational requires a numerator and denominator . For example, to create the rational number 2/3 : two_thirds = Rational ( 2 , 3 ) # 2/3","title":"Initialisation"},{"location":"rational/#from-a-floating-point-number","text":"A Rational can also be created from a float by calling from_float . two_and_a_half = Rational . from_float ( 2.5 ) # 5/2","title":"From a floating-point number"},{"location":"rational/#from-a-string","text":"Finally, a Rational can also be created by passing a string to from_string . The string is expected to be either: a fraction in the form x/y or -x/y , or: a decimal in the form x , -x , x.y or -x.y , where . is your local culture's decimal marker. two_thirds = Rational . from_string ( \"2/3\" ) # 2/3 two_and_a_half = Rational . from_string ( \"2.5\" ) # 5/2","title":"From a string"},{"location":"rational/#mathematic-operations","text":"The following operations can be performed between a Rational and: int float str other Rational instances","title":"Mathematic operations"},{"location":"rational/#addition","text":"Rational ( 1 , 3 ) + Rational ( 1 , 4 ) # 7/12 Rational ( 1 , 3 ) + 0.25 # 7/12 Rational ( 1 , 3 ) + \"0.25\" # 7/12 Rational ( 1 , 3 ) + \"1/4\" # 7/12","title":"Addition"},{"location":"rational/#subtraction","text":"Rational ( 2 , 3 ) - Rational ( 1 , 4 ) # 5/12 Rational ( 2 , 3 ) - 0.25 # 5/12 Rational ( 2 , 3 ) - \"0.25\" # 5/12 Rational ( 2 , 3 ) - \"1/4\" # 5/12","title":"Subtraction"},{"location":"rational/#multiplication","text":"Rational ( 2 , 4 ) * Rational ( 3 , 6 ) # 1/4 Rational ( 2 , 4 ) * 0.5 # 1/4 Rational ( 2 , 4 ) * \"0.5\" # 1/4 Rational ( 2 , 4 ) * \"4/8\" # 1/4","title":"Multiplication"},{"location":"rational/#true-division","text":"Rational ( 20 , 4 ) / Rational ( 17 , 8 ) # 40/17 Rational ( 20 , 4 ) / 2.125 # 40/17 Rational ( 20 , 4 ) / \"2.125\" # 40/17 Rational ( 20 , 4 ) / \"17/8\" # 40/17","title":"True division"},{"location":"rational/#floor-division","text":"Floor division returns a Rational that describes the integral result of the division. Rational ( 20 , 4 ) // Rational ( 17 , 8 ) # 2/1 Rational ( 20 , 4 ) // 2.125 # 2/1 Rational ( 20 , 4 ) // \"2.125\" # 2/1 Rational ( 20 , 4 ) // \"17/8\" # 2/1","title":"Floor division"},{"location":"rational/#comparison","text":"","title":"Comparison"},{"location":"rational/#equality","text":"Rational ( 2 , 4 ) == Rational ( 3 , 6 ) # True Rational ( 2 , 4 ) == 0.5 # True Rational ( 2 , 4 ) == \"0.5\" # True Rational ( 2 , 4 ) == \"4/8\" # True","title":"Equality"},{"location":"rational/#greater-than","text":"Rational ( 2 , 3 ) > Rational ( 1 , 4 ) # True Rational ( 2 , 3 ) > 0.25 # True Rational ( 2 , 3 ) > \"0.25\" # True Rational ( 2 , 3 ) > \"1/4\" # True","title":"Greater than"},{"location":"rational/#greater-than-or-equal-to","text":"Rational ( 2 , 3 ) >= Rational ( 1 , 4 ) # True Rational ( 2 , 3 ) >= 0.25 # True Rational ( 2 , 3 ) >= \"0.25\" # True Rational ( 2 , 3 ) >= \"1/4\" # True","title":"Greater than or equal to"},{"location":"rational/#less-than","text":"Rational ( 2 , 3 ) < Rational ( 1 , 4 ) # False Rational ( 2 , 3 ) < 0.25 # False Rational ( 2 , 3 ) < \"0.25\" # False Rational ( 2 , 3 ) < \"1/4\" # False","title":"Less than"},{"location":"rational/#less-than-or-equal-to","text":"Rational ( 2 , 3 ) <= Rational ( 1 , 4 ) # False Rational ( 2 , 3 ) <= 0.25 # False Rational ( 2 , 3 ) <= \"0.25\" # False Rational ( 2 , 3 ) <= \"1/4\" # False","title":"Less than or equal to"},{"location":"rational/#integral-and-fractional-parts","text":"The integral property returns the integral part of the number, and fractional returns the fractional part. For example, given 3/2 , the integral part is 1 (i.e. 2/2 ) and the fractional part is 1/2 .","title":"Integral and fractional parts"},{"location":"rational/#decimal-string","text":"The decimal function returns the Rational as a decimal string. Rational ( 33 , 8 ) . decimal () # \"4.125\" By default, decimal will return no more than 100 decimal places. To adjust this, set the max_dp argument. This is limited only by your available memory and patience. Rational ( 355 , 113 ) . decimal ( max_dp = 6 ) # \"3.141592\" By default, decimal will monitor for recurring digits and represent them with an overhead dot. Rational ( 1 , 3 ) . decimal () # \"0.\u03073\" If you prefer, you can disable recursion tracking by setting recursion=False . Rational ( 1 , 3 ) . decimal ( max_dp = 6 , recursion = False ) # \"0.333333\" Also, if you prefer, you can change the overhead dot to any string by setting recurring_prefix . For example, \\u0305 is an overhead line. Rational ( 1 , 3 ) . decimal ( recurring_prefix = \" \\u0305 \" ) # \"0.\u03053\" Tip To get the true floating-point value of a Rational , convert it to a float via Python's built-in float() function. float ( Rational ( 4 , 3 )) # 1.3333333333333333","title":"Decimal string"},{"location":"rational/#reciprocals","text":"The reciprocal property returns the reciprocal of the Rational . Rational ( 1 , 3 ) . reciprocal # 3/1","title":"Reciprocals"},{"location":"rational/#reduction","text":"The reduced property returns the Rational in its most-simplified form. Rational ( 25767 , 34356 ) . reduced # 3/4","title":"Reduction"},{"location":"rational/#converting-to-floating-point-and-integer-numbers","text":"To get the true floating-point value of a Rational , convert it to a float via Python's built-in float() function. float ( Rational ( 4 , 3 )) # 1.3333333333333333 Likewise, use the built-in int() function to get the integral value as an int . int ( Rational ( 4 , 3 )) # 1","title":"Converting to floating-point and integer numbers"}]}